{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [],
		"devdoc": {
			"details": "Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write.",
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"new marksheet-upgradable/proxy.sol": "StorageSlot"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"new marksheet-upgradable/proxy.sol": {
			"keccak256": "0x3843cff42923a24c358855cf1657433f131c780f564db8ad15f55076ae06438f",
			"license": "MIT",
			"urls": [
				"bzz-raw://d6fc185a79da6f80da8d62d78633d24f31a35e4ccc40dc840494311c12493153",
				"dweb:/ipfs/QmZTZb4uGfuLikFRMcjNPSWJ3uaLN1EEqN94LDVUM8JAiy"
			]
		}
	},
	"version": 1
}